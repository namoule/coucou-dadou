✅ FINIT/TESTE
												❓ A TESTER
												⛔ NE MARCHE PAS/ A FAIRE
												〰️	BLOCK PAS CLEAR
----------------------------------------------------------------------------------------------------------------------------------

SUBJECT 										✅❓⛔〰️

------------------------------------------------------------------------------------------------------------------------------------

												Compile ✅

Use "make -n" to see if compilation use "-Wall -Wextra -Werror". If not, select the "invalid compilation" flag.

----------------------------------------------------------------------------------------------------------------------------------

									Simple Command & global variables ✅❓

Execute a simple command with an absolute path like /bin/ls, or any other command without any options. ✅

How many global variables are used? ❓

Why? Ask the evaluated student to give you a concrete example of why it feels mandatory or logical. ❓

Check the global variable. This global variable cannot provide any other information or data access than the number of a received signal. ❓

Test an empty command. ✅

Test only spaces or tabs.✅

----------------------------------------------------------------------------------------------------------------------------------

													Arguments ✅

Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes or double quotes. ✅

Repeat multiple times with different commands and arguments. ✅

----------------------------------------------------------------------------------------------------------------------------------

														echo ✅

Execute the echo command with or without arguments, or the -n option. ✅

Repeat multiple times with different arguments. ✅

----------------------------------------------------------------------------------------------------------------------------------

													exit❓

Execute exit command with or without arguments. ✅

Repeat multiple times with different arguments. ❓ (po compris les arguments...)

----------------------------------------------------------------------------------------------------------------------------------

												Return value of a process ⛔						✅❓⛔〰️

										⛔⛔ RETURN VALUE OK: A METTRE EN EXPAND⛔⛔

Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes and double quotes. Then execute echo $? ⛔

Check the printed value. You can do the same in bash in order to compare the results. ⛔

Repeat multiple times with different commands and arguments. Try some wrong commands like '/bin/ls filethatdoesntexist' ⛔

Try anything like expr $? + $? ⛔


----------------------------------------------------------------------------------------------------------------------------------

														Signals ⛔ 						✅❓⛔〰️

ctrl-C in an empty prompt should display a new line with a new prompt.  ⛔

ctrl-\ in an empty prompt should not do anything.  ⛔

ctrl-D in an empty prompt should quit minishell --> RELAUNCH!  ⛔

ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.  ⛔

The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.  ⛔

ctrl-D in a prompt after you wrote some stuff should not do anything.  ⛔

ctrl-\ in a prompt after you wrote some stuff should not do anything.  ⛔

Try ctrl-C after running a blocking command like cat without arguments or grep "something".  ⛔

Try ctrl-\ after running a blocking command like cat without arguments or grep "something".  ⛔

Try ctrl-D after running a blocking command like cat without arguments or grep "something".  ⛔

Repeat multiple times using different commands.  ⛔

If something crashes, select the "crash" flag.  ⛔

If something doesn't work, select the "incomplete work" flag.  ⛔

----------------------------------------------------------------------------------------------------------------------------------

													Double Quotes ❓											✅❓⛔〰️

Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).  ❓

Try a command like : echo "cat lol.c | cat > lol.c"  ⛔

Try anything except $. ❓

----------------------------------------------------------------------------------------------------------------------------------

													Single Quotes ✅❓⛔〰️

Execute commands with single quotes as arguments. ❓

Try empty arguments. ❓

Try environment variables, whitespaces, pipes, redirection in the single quotes. ❓

echo '$USER' must print "$USER". ❓

Nothing should be interpreted. ❓

----------------------------------------------------------------------------------------------------------------------------------

													env ✅

Check if env shows you the current environment variables.  ✅

----------------------------------------------------------------------------------------------------------------------------------

													export✅

Export environment variables, create new ones  ✅ and replace old ones. ✅

Check the result with env.  ✅

----------------------------------------------------------------------------------------------------------------------------------

														unset ✅
Export environment variables, create new ones and replace old ones.  ✅

Use unset to remove some of them. ✅

Check the result with env.  ✅

----------------------------------------------------------------------------------------------------------------------------------

													cd ✅

Use the command cd to move the working directory and check if you are in the right directory with /bin/ls  ✅

Repeat multiple times with working and not working cd  ✅

----------------------------------------------------------------------------------------------------------------------------------

													pwd ✅

Use the command pwd.  ✅

Repeat multiple times in different directories.  ✅

----------------------------------------------------------------------------------------------------------------------------------

													Relative Path ✅

Execute commands but this time use a relative path.  ✅

Repeat multiple times in different directories with a complex relative path (lots of ..).  ✅

----------------------------------------------------------------------------------------------------------------------------------

											Environment path ❓

Execute commands but this time without any path (ls, wc, awk and so forth).  ✅

Unset the $PATH and ensure commands are not working anymore. ✅

Set the $PATH to a multiple directory value (directory1:directory2) and ensure that directories are checked in order from left to right. ❓

----------------------------------------------------------------------------------------------------------------------------------

												Redirections 〰️ ⛔LEAKS⛔

Execute commands with redirections < and/or > ✅

Repeat multiple times with different commands and arguments and sometimes change > with >> ✅ ⛔LEAKS⛔

Check if multiple tries of the same redirections fail. ✅

Test << redirection (it doesn't have to update the history). ✅

/home/jealefev/Documents/en_cours/intra-uuid-0656183a-8b66-4a2b-9a14-402fc71804b4-5998461-jealefev/Minishell >> cat infile > poule | cat
==1653057== Syscall param execve(envp) points to unaddressable byte(s)
==1653057==    at 0x49B308B: execve (syscall-template.S:120)
==1653057==    by 0x40243F: execute (execute.c:38)
==1653057==    by 0x402564: execute_cmd (execute.c:60)
==1653057==    by 0x40296C: launch_exec (main.c:21)
==1653057==    by 0x402A51: flunch (main.c:41)
==1653057==    by 0x402B1F: exec_command (main.c:64)
==1653057==    by 0x402BFB: main (main.c:91)
==1653057==  Address 0x4ba5060 is 0 bytes after a block of size 576 alloc'd
==1653057==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1653057==    by 0x401E6B: unset (unset.c:33)
==1653057==    by 0x4014EE: is_builtins (builtins.c:59)
==1653057==    by 0x402A21: flunch (main.c:39)
==1653057==    by 0x402B1F: exec_command (main.c:64)
==1653057==    by 0x402BFB: main (main.c:91)
==1653057==
==1653058== Syscall param execve(envp) points to unaddressable byte(s)
==1653058==    at 0x49B308B: execve (syscall-template.S:120)
==1653058==    by 0x40243F: execute (execute.c:38)
==1653058==    by 0x402564: execute_cmd (execute.c:60)
==1653058==    by 0x40296C: launch_exec (main.c:21)
==1653058==    by 0x402A51: flunch (main.c:41)
==1653058==    by 0x402B1F: exec_command (main.c:64)
==1653058==    by 0x402BFB: main (main.c:91)
==1653058==  Address 0x4ba5060 is 0 bytes after a block of size 576 alloc'd
==1653058==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1653058==    by 0x401E6B: unset (unset.c:33)
==1653058==    by 0x4014EE: is_builtins (builtins.c:59)
==1653058==    by 0x402A21: flunch (main.c:39)
==1653058==    by 0x402B1F: exec_command (main.c:64)
==1653058==    by 0x402BFB: main (main.c:91)
==1653058==
==1647627== ev/Documents/en_cours/intra-uuid-0656183a-8b66-4a2b-9a14-402fc71804b4-5998461-jealefev/Minishell >> ^C
==1647627== Process terminating with default action of signal 2 (SIGINT)
==1647627==    at 0x490A75B: kill (syscall-template.S:120)
==1647627==    by 0x48A7F39: _rl_signal_handler (in /usr/lib/x86_64-linux-gnu/libreadline.so.8.1)
==1647627==    by 0x48A8BEC: rl_getc (in /usr/lib/x86_64-linux-gnu/libreadline.so.8.1)
==1647627==    by 0x48A8460: rl_read_key (in /usr/lib/x86_64-linux-gnu/libreadline.so.8.1)
==1647627==    by 0x488CC86: readline_internal_char (in /usr/lib/x86_64-linux-gnu/libreadline.so.8.1)
==1647627==    by 0x4895D14: readline (in /usr/lib/x86_64-linux-gnu/libreadline.so.8.1)
==1647627==    by 0x40347C: get_line (prompt_setter.c:69)
==1647627==    by 0x402BB6: main (main.c:87)
==1647627==
==1647627== FILE DESCRIPTORS: 6 open (3 std) at exit.
==1647627== Open file descriptor 3: poule
==1647627==    at 0x49DC53B: open (open64.c:41)
==1647627==    by 0x405403: open_fct_check (utils.c:98)
==1647627==    by 0x403BB8: helper_fd_out (parsing_utils.c:52)
==1647627==    by 0x403C74: find_fd_out (parsing_utils.c:67)
==1647627==    by 0x404FD9: process_tokens (tokens_1.c:66)
==1647627==    by 0x40501E: split_and_process_tokens (tokens_1.c:76)
==1647627==    by 0x40512E: tokenize_input (tokens_1.c:104)
==1647627==    by 0x403EC2: fill_t_command (parsing_utils.c:110)
==1647627==    by 0x402B0E: exec_command (main.c:63)
==1647627==    by 0x402BFB: main (main.c:91)
==1647627==



-----------------------

/home/jealefev/Documents/en_cours/intra-uuid-0656183a-8b66-4a2b-9a14-402fc71804b4-5998461-jealefev/Minishell >> cat infile < poule >> poule
==1653309== Warning: invalid file descriptor -2 in syscall close()


----------------------------------------------------------------------------------------------------------------------------------

												Pipes✅

Execute commands with pipes like 'cat file | grep bla | more' ✅

Repeat multiple times with different commands and arguments. ✅

----------------------------------------------------------------------------------------------------------------------------------

											Go Crazy and history 〰️

Type a command line, then use ctrl-C and press "Enter". The buffer should be clean and there should be nothing left to execute. ⛔

Can we navigate through history using Up and Down? Can we retry some command? ✅

Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error. ✅ ⛔LEAKS⛔

'cat | cat | ls' should behave in a "normal way". ✅

Try to execute a long command with a ton of arguments. ✅

------------------------------------------------------------------------------------------------------------------------------------

											Environment variables 〰️

Execute echo with some environment variables ($variable) as arguments. ❓

Check that $ is interpreted as an environment variable. ❓

Check that double quotes interpolate $. ❓

Check that USER exists. Otherwise, set it. ✅

echo "$USER" should print the value of the USER variable. ✅ ⛔LEAKS⛔- "cat lol.c | cat > lol.c"
- valeur invalide
- export/env leak
- echo ' ' = ' ' but shld b empty
-leak unset $path
